# Git을 활용한 작업 관리 방식

## 🎯 **기본 원칙**

- 모든 작업은 Git을 활용해서 단계별로 관리
- 작은 단위로 커밋하여 안전한 작업 진행
- 브랜치 기반으로 실험적인 작업 수행
- 마음에 들지 않으면 언제든 이전 상태로 되돌리기 가능

## 📝 **작업 단계별 커밋 규칙**

### **1. 기능별 커밋**

- **새로운 기능 추가**: `✨ [기능명] - 간단한 설명`
- **스타일 변경**: `🎨 [파일명] - 변경 내용`
- **버그 수정**: `🐛 [문제] - 수정 내용`
- **리팩토링**: `♻️ [파일명] - 개선 내용`
- **문서 업데이트**: `📚 [문서명] - 업데이트 내용`

### **2. 커밋 메시지 예시**

```bash
git commit -m "✨ 테마 변경 기능 추가 - 다크/라이트 모드 전환"
git commit -m "🎨 Schedule.tsx - 인라인 스타일을 CSS 클래스로 교체"
git commit -m "🐛 드래그앤드롭 미리보기 수정 - 시각적 피드백 개선"
git commit -m "♻️ 컴포넌트 분리 - 아토믹 디자인 원칙 적용"
```

## 🌿 **브랜치 전략**

### **1. 브랜치 생성 규칙**

```bash
# 새로운 기능을 위한 브랜치
git checkout -b feature/기능명

# 버그 수정을 위한 브랜치
git checkout -b fix/버그명

# 실험적인 작업을 위한 브랜치
git checkout -b experiment/실험명
```

### **2. 브랜치 사용 예시**

```bash
# 테마 기능 개발
git checkout -b feature/theme-system

# 아토믹 디자인 적용
git checkout -b feature/atomic-design

# 드래그앤드롭 개선
git checkout -b feature/drag-drop-enhancement
```

## 🔄 **작업 되돌리기 방법**

### **1. 특정 커밋으로 되돌리기**

```bash
# 특정 커밋 상태로 되돌리기 (변경사항 유지)
git reset --soft 커밋해시

# 특정 커밋 상태로 되돌리기 (변경사항 삭제)
git reset --hard 커밋해시

# 특정 커밋 상태로 되돌리기 (스테이징만 되돌리기)
git reset 커밋해시
```

### **2. 브랜치 전체 되돌리기**

```bash
# main 브랜치로 돌아가기
git checkout main

# 실험 브랜치 삭제
git branch -D feature/기능명
```

### **3. 특정 파일만 되돌리기**

```bash
# 특정 파일을 이전 커밋 상태로 되돌리기
git checkout 커밋해시 -- 파일경로

# 예시: Schedule.tsx를 이전 상태로 되돌리기
git checkout HEAD~1 -- frontend/src/pages/Schedule.tsx
```

## 📊 **작업 진행 상황 확인**

### **1. 커밋 히스토리 확인**

```bash
# 최근 커밋 확인
git log --oneline -10

# 특정 브랜치와의 차이점 확인
git diff main..feature/기능명

# 변경된 파일 통계 확인
git diff main..feature/기능명 --stat
```

### **2. 현재 상태 확인**

```bash
# 현재 브랜치 확인
git branch

# 변경사항 확인
git status

# 스테이징된 변경사항 확인
git diff --cached
```

## 🚀 **작업 진행 순서**

### **1. 새로운 작업 시작**

```bash
# 1. main 브랜치에서 최신 상태 확인
git checkout main
git pull origin main

# 2. 새로운 기능 브랜치 생성
git checkout -b feature/새기능

# 3. 작업 진행
# ... 코드 작성 ...

# 4. 커밋 전 포맷팅 적용 및 커밋
# (아래 "Prettier 자동 포맷팅 관리" 섹션 참조)
```

### **2. 작업 중간 확인**

```bash
# 현재까지의 변경사항 확인
git log --oneline -5

# 특정 단계로 되돌리기
git reset --hard 커밋해시
```

### **3. 작업 완료 후**

```bash
# 커밋 전 포맷팅 적용 후 실제 변경사항만 커밋
# (아래 "Prettier 자동 포맷팅 관리" 섹션 참조)

# main 브랜치로 병합 (선택사항)
git checkout main
git merge feature/새기능
```

## ⚠️ **주의사항**

### **1. 안전한 작업을 위한 팁**

- **작은 단위로 커밋**: 한 번에 너무 많은 변경사항을 커밋하지 않기
- **의미있는 커밋 메시지**: 나중에 이해할 수 있도록 명확하게 작성
- **정기적인 확인**: `git status`와 `git log`로 현재 상황 파악
- **백업**: 중요한 작업 전에 main 브랜치에 푸시

### **2. 되돌리기 전 확인사항**

- **현재 작업 상태**: `git status`로 변경사항 확인
- **커밋 히스토리**: `git log --oneline`으로 되돌릴 지점 확인
- **파일별 변경사항**: `git diff`로 구체적인 변경 내용 확인

## 💡 **실제 사용 예시**

### **예시 1: 테마 기능 개발**

```bash
# 1. 브랜치 생성
git checkout -b feature/theme-system

# 2. 단계별 작업 및 커밋 (Prettier 자동 포맷팅 적용 후)
# (아래 "Prettier 자동 포맷팅 관리" 섹션 참조)

# 3. 마음에 들지 않으면 되돌리기
git reset --hard HEAD~1  # 마지막 커밋 되돌리기
```

### **예시 2: 스타일 개선**

```bash
# 1. 브랜치 생성
git checkout -b feature/style-improvement

# 2. 단계별 작업 및 커밋 (Prettier 자동 포맷팅 적용 후)
# (아래 "Prettier 자동 포맷팅 관리" 섹션 참조)

# 3. 특정 파일만 되돌리기
git checkout HEAD~1 -- frontend/src/pages/Schedule.tsx
```

## 🎨 **자동 코드 정리 및 커밋 관리**

### **1. 작업 완료 후 자동 정리 원칙**

- **작업 완료 후 자동 정리**: 모든 작업이 정상적으로 완료된 후 자동으로 포맷팅, ESLint 오류 해결, import 정리 수행
- **사용자 확인 후 커밋**: 자동 정리 완료 후 사용자가 변경사항을 확인하고 승인한 후에만 Git 커밋
- **깔끔한 커밋 히스토리**: 포맷팅과 기능 변경이 분리되지 않고 통합된 상태로 커밋

### **2. 작업 완료 후 자동 정리 순서**

```bash
# 1. 작업 완료 확인
# ✅ 모든 기능이 정상적으로 동작하는지 확인
# ✅ 테스트가 통과하는지 확인

# 2. 자동 코드 정리 실행
npm run clean  # ESLint 자동 수정 + Prettier 포맷팅 + import 정리

# 3. 정리 후 변경사항 확인
git status     # 변경된 파일 목록 확인
git diff       # 구체적인 변경 내용 확인

# 4. 사용자 확인 및 승인
# 👀 변경사항을 검토하고 승인

# 5. 승인 후 Git 커밋
git add .
git commit -m "✨ [기능명] - 실제 변경 내용"
```

### **3. 자동 정리 후 커밋 방법**

```bash
# 방법 1: 전체 변경사항 커밋 (권장)
git add .             # 정리된 모든 변경사항 스테이징
git diff --cached     # 스테이징된 변경사항 확인
git commit -m "✨ [기능명] - 실제 변경 내용"

# 방법 2: 변경사항 통계 확인 후 커밋
git diff --name-only  # 변경된 파일명만 확인
git diff --stat       # 변경 통계 확인
git add .
git commit -m "✨ [기능명] - 실제 변경 내용"

# 방법 3: 특정 파일만 선택적 커밋
git add 파일명1 파일명2  # 실제 변경된 파일만 선택
git commit -m "✨ [기능명] - 선택적 커밋"
```

### **4. 실제 사용 예시 (작업 완료 후 자동 정리)**

#### **예시 1: 테마 기능 개발**

```bash
# 1. 브랜치 생성
git checkout -b feature/theme-system

# 2. 코드 작성 완료
# ... 코드 작성 ...

# 3. 작업 완료 확인
# ✅ 테마 전환 기능이 정상 동작하는지 확인
# ✅ 테스트가 통과하는지 확인

# 4. 자동 코드 정리 실행
npm run clean  # ESLint 자동 수정 + Prettier 포맷팅 + import 정리

# 5. 정리 후 변경사항 확인
git status     # 변경된 파일 목록 확인
git diff       # 구체적인 변경 내용 확인

# 6. 사용자 확인 및 승인
# 👀 변경사항을 검토하고 승인

# 7. 승인 후 Git 커밋
git add .
git commit -m "🌙 테마 시스템 기반 구축 - ThemeContext, ThemeToggle 컴포넌트 추가"
```

#### **예시 2: 테스트 코드 작성**

```bash
# 1. 브랜치 생성
git checkout -b feature/test-implementation

# 2. 테스트 코드 작성 완료
# ... 테스트 코드 작성 ...

# 3. 작업 완료 확인
# ✅ 모든 테스트가 통과하는지 확인
# ✅ 테스트 커버리지가 만족스러운지 확인

# 4. 자동 코드 정리 실행
npm run clean  # ESLint 자동 수정 + Prettier 포맷팅 + import 정리

# 5. 정리 후 변경사항 확인
git status     # 변경된 파일 목록 확인
git diff       # 구체적인 변경 내용 확인

# 6. 사용자 확인 및 승인
# 👀 변경사항을 검토하고 승인

# 7. 승인 후 Git 커밋
git add .
git commit -m "🧪 organisms 컴포넌트 테스트 코드 추가 - StudentPanel, SessionModal"
```

### **5. 작업 완료 후 자동 정리 워크플로우**

#### **AI 어시스턴트가 따라야 할 순서**

1. **작업 완료 확인**

   - ✅ 모든 기능이 정상적으로 동작하는지 확인
   - ✅ 테스트가 통과하는지 확인
   - ✅ 사용자 요구사항이 충족되었는지 확인

2. **자동 코드 정리 실행**

   ```bash
   npm run clean  # ESLint 자동 수정 + Prettier 포맷팅 + import 정리
   ```

3. **정리 후 변경사항 확인**

   ```bash
   git status     # 변경된 파일 목록 확인
   git diff       # 구체적인 변경 내용 확인
   ```

4. **사용자에게 확인 요청**

   - 📋 변경된 파일 목록 제시
   - 🔍 주요 변경사항 요약
   - 👀 사용자 승인 대기

5. **사용자 승인 후 Git 커밋**
   ```bash
   git add .
   git commit -m "✨ [기능명] - 실제 변경 내용"
   ```

#### **자동화 스크립트 (선택사항)**

```bash
#!/bin/bash
# auto-cleanup.sh - 작업 완료 후 자동 정리

echo "🧹 작업 완료 후 자동 코드 정리 시작..."

echo "🔧 ESLint 자동 수정 적용 중..."
npm run lint:fix

echo "🎨 Prettier 포맷팅 적용 중..."
npm run format

echo "📊 정리 후 변경사항 확인 중..."
if git diff --quiet; then
    echo "✅ 정리 후 변경사항이 없습니다."
    exit 0
else
    echo "📝 코드 정리가 완료되었습니다."
    echo "📋 변경된 파일:"
    git diff --name-only
    echo ""
    echo "🔍 전체 변경사항을 확인하려면: git diff"
    echo "👀 변경사항을 검토한 후 승인해주세요."
    echo "✅ 승인 후 커밋하려면: git add . && git commit"
    exit 0
fi
```

이 규칙을 따르면 Git을 활용해서 안전하고 체계적으로 작업을 진행할 수 있습니다!

---

description: Git을 활용한 체계적인 작업 관리 및 자동 코드 정리 워크플로우
globs: ["**/*"]
alwaysApply: true

---
