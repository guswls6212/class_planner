# Git을 활용한 작업 관리 방식

## 🎯 **기본 원칙**
- 모든 작업은 Git을 활용해서 단계별로 관리
- 작은 단위로 커밋하여 안전한 작업 진행
- 브랜치 기반으로 실험적인 작업 수행
- 마음에 들지 않으면 언제든 이전 상태로 되돌리기 가능

## 📝 **작업 단계별 커밋 규칙**

### **1. 기능별 커밋**
- **새로운 기능 추가**: `✨ [기능명] - 간단한 설명`
- **스타일 변경**: `🎨 [파일명] - 변경 내용`
- **버그 수정**: `🐛 [문제] - 수정 내용`
- **리팩토링**: `♻️ [파일명] - 개선 내용`
- **문서 업데이트**: `📚 [문서명] - 업데이트 내용`

### **2. 커밋 메시지 예시**
```bash
git commit -m "✨ 테마 변경 기능 추가 - 다크/라이트 모드 전환"
git commit -m "🎨 Schedule.tsx - 인라인 스타일을 CSS 클래스로 교체"
git commit -m "🐛 드래그앤드롭 미리보기 수정 - 시각적 피드백 개선"
git commit -m "♻️ 컴포넌트 분리 - 아토믹 디자인 원칙 적용"
```

## 🌿 **브랜치 전략**

### **1. 브랜치 생성 규칙**
```bash
# 새로운 기능을 위한 브랜치
git checkout -b feature/기능명

# 버그 수정을 위한 브랜치
git checkout -b fix/버그명

# 실험적인 작업을 위한 브랜치
git checkout -b experiment/실험명
```

### **2. 브랜치 사용 예시**
```bash
# 테마 기능 개발
git checkout -b feature/theme-system

# 아토믹 디자인 적용
git checkout -b feature/atomic-design

# 드래그앤드롭 개선
git checkout -b feature/drag-drop-enhancement
```

## 🔄 **작업 되돌리기 방법**

### **1. 특정 커밋으로 되돌리기**
```bash
# 특정 커밋 상태로 되돌리기 (변경사항 유지)
git reset --soft 커밋해시

# 특정 커밋 상태로 되돌리기 (변경사항 삭제)
git reset --hard 커밋해시

# 특정 커밋 상태로 되돌리기 (스테이징만 되돌리기)
git reset 커밋해시
```

### **2. 브랜치 전체 되돌리기**
```bash
# main 브랜치로 돌아가기
git checkout main

# 실험 브랜치 삭제
git branch -D feature/기능명
```

### **3. 특정 파일만 되돌리기**
```bash
# 특정 파일을 이전 커밋 상태로 되돌리기
git checkout 커밋해시 -- 파일경로

# 예시: Schedule.tsx를 이전 상태로 되돌리기
git checkout HEAD~1 -- frontend/src/pages/Schedule.tsx
```

## 📊 **작업 진행 상황 확인**

### **1. 커밋 히스토리 확인**
```bash
# 최근 커밋 확인
git log --oneline -10

# 특정 브랜치와의 차이점 확인
git diff main..feature/기능명

# 변경된 파일 통계 확인
git diff main..feature/기능명 --stat
```

### **2. 현재 상태 확인**
```bash
# 현재 브랜치 확인
git branch

# 변경사항 확인
git status

# 스테이징된 변경사항 확인
git diff --cached
```

## 🚀 **작업 진행 순서**

### **1. 새로운 작업 시작**
```bash
# 1. main 브랜치에서 최신 상태 확인
git checkout main
git pull origin main

# 2. 새로운 기능 브랜치 생성
git checkout -b feature/새기능

# 3. 작업 진행
# ... 코드 작성 ...

# 4. 단계별 커밋
git add .
git commit -m "✨ 첫 번째 단계 완성"
```

### **2. 작업 중간 확인**
```bash
# 현재까지의 변경사항 확인
git log --oneline -5

# 특정 단계로 되돌리기
git reset --hard 커밋해시
```

### **3. 작업 완료 후**
```bash
# 모든 변경사항 커밋
git add .
git commit -m "✨ 작업 완료 - 전체 기능 구현"

# main 브랜치로 병합 (선택사항)
git checkout main
git merge feature/새기능
```

## ⚠️ **주의사항**

### **1. 안전한 작업을 위한 팁**
- **작은 단위로 커밋**: 한 번에 너무 많은 변경사항을 커밋하지 않기
- **의미있는 커밋 메시지**: 나중에 이해할 수 있도록 명확하게 작성
- **정기적인 확인**: `git status`와 `git log`로 현재 상황 파악
- **백업**: 중요한 작업 전에 main 브랜치에 푸시

### **2. 되돌리기 전 확인사항**
- **현재 작업 상태**: `git status`로 변경사항 확인
- **커밋 히스토리**: `git log --oneline`으로 되돌릴 지점 확인
- **파일별 변경사항**: `git diff`로 구체적인 변경 내용 확인

## 💡 **실제 사용 예시**

### **예시 1: 테마 기능 개발**
```bash
# 1. 브랜치 생성
git checkout -b feature/theme-system

# 2. 단계별 작업 및 커밋
git add . && git commit -m "🌙 ThemeContext 생성 - 테마 상태 관리"
git add . && git commit -m "🎨 ThemeToggle 컴포넌트 - 테마 변경 버튼"
git add . && git commit -m "✨ 네비게이션에 테마 토글 적용"

# 3. 마음에 들지 않으면 되돌리기
git reset --hard HEAD~1  # 마지막 커밋 되돌리기
```

### **예시 2: 스타일 개선**
```bash
# 1. 브랜치 생성
git checkout -b feature/style-improvement

# 2. 단계별 작업 및 커밋
git add . && git commit -m "🎨 전역 CSS 변수 추가 - 테마별 색상 정의"
git add . && git commit -m "🎨 Schedule.tsx - 인라인 스타일을 CSS 클래스로 교체"

# 3. 특정 파일만 되돌리기
git checkout HEAD~1 -- frontend/src/pages/Schedule.tsx
```

이 규칙을 따르면 Git을 활용해서 안전하고 체계적으로 작업을 진행할 수 있습니다!
description:
globs:
alwaysApply: false
---
