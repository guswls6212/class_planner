import { describe, it, expect, beforeEach, afterEach, vi } from "vitest";
import { render, screen, waitFor } from "@testing-library/react";
import React from "react";
import { TimeTableGrid } from "@/components/organisms/TimeTableGrid";
import { SessionBlock } from "@/components/molecules/SessionBlock";
import { StudentPanel } from "@/components/organisms/StudentPanel";

// 네트워크 불안정 상황 시뮬레이션
describe("네트워크 불안정 상황 테스트", () => {
  beforeEach(() => {
    // 네트워크 요청 모킹
    global.fetch = vi.fn();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it("네트워크 타임아웃 상황에서 컴포넌트가 안전하게 처리되어야 한다", async () => {
    // Arrange - 네트워크 타임아웃 시뮬레이션
    vi.mocked(global.fetch).mockImplementation(
      () =>
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Network timeout")), 100)
        )
    );

    // Act - 컴포넌트 렌더링
    render(<TimeTableGrid sessions={new Map()} subjects={[]} />);

    // Assert - 컴포넌트가 크래시하지 않고 렌더링됨
    await waitFor(() => {
      expect(screen.getByTestId("time-table-grid")).toBeInTheDocument();
    });
  });

  it("네트워크 에러 상황에서 기본값으로 안전하게 처리되어야 한다", async () => {
    // Arrange - 네트워크 에러 시뮬레이션
    vi.mocked(global.fetch).mockRejectedValue(new Error("Network error"));

    // Act - SessionBlock 컴포넌트 렌더링 (잘못된 데이터)
    const invalidSession = {
      id: "session-1",
      subjectId: "subject-1",
      startsAt: "10:00",
      endsAt: "11:00",
      weekday: 1,
      enrollmentIds: undefined, // 네트워크 에러로 인한 undefined
    };

    render(
      <SessionBlock
        session={invalidSession}
        subjects={[]}
        students={[]}
        enrollments={[]}
        onClick={() => {}}
      />
    );

    // Assert - 컴포넌트가 안전하게 렌더링됨
    expect(screen.getByTestId("session-block-session-1")).toBeInTheDocument();
  });

  it("느린 네트워크 연결에서 로딩 상태가 적절히 표시되어야 한다", async () => {
    // Arrange - 느린 네트워크 시뮬레이션
    vi.mocked(global.fetch).mockImplementation(
      () =>
        new Promise((resolve) =>
          setTimeout(() => resolve(new Response("{}")), 2000)
        )
    );

    // Act - StudentPanel 컴포넌트 렌더링
    const mockPanelState = {
      position: { x: 0, y: 0 },
      filteredStudents: [],
      searchQuery: "",
    };

    render(
      <StudentPanel
        panelState={mockPanelState}
        onSearchChange={() => {}}
        onStudentSelect={() => {}}
        onDragStart={() => {}}
        onDragEnd={() => {}}
      />
    );

    // Assert - 컴포넌트가 즉시 렌더링됨
    expect(screen.getByTestId("students-panel-header")).toBeInTheDocument();
  });
});

// 실제 데이터 형식 검증 테스트
describe("실제 데이터 형식 검증 테스트", () => {
  it("API에서 받은 실제 데이터 형식이 예상과 다를 때 안전하게 처리되어야 한다", () => {
    // Arrange - 실제 API에서 받을 수 있는 다양한 데이터 형식
    const realWorldData = {
      // 정상적인 데이터
      normalSession: {
        id: "session-1",
        subjectId: "subject-1",
        startsAt: "10:00",
        endsAt: "11:00",
        weekday: 1,
        enrollmentIds: ["enrollment-1"],
      },
      // enrollmentIds가 null인 경우
      nullEnrollmentIds: {
        id: "session-2",
        subjectId: "subject-1",
        startsAt: "11:00",
        endsAt: "12:00",
        weekday: 1,
        enrollmentIds: null,
      },
      // enrollmentIds가 빈 배열인 경우
      emptyEnrollmentIds: {
        id: "session-3",
        subjectId: "subject-1",
        startsAt: "12:00",
        endsAt: "13:00",
        weekday: 1,
        enrollmentIds: [],
      },
      // enrollmentIds가 undefined인 경우
      undefinedEnrollmentIds: {
        id: "session-4",
        subjectId: "subject-1",
        startsAt: "13:00",
        endsAt: "14:00",
        weekday: 1,
        enrollmentIds: undefined,
      },
      // 잘못된 시간 형식
      invalidTimeFormat: {
        id: "session-5",
        subjectId: "subject-1",
        startsAt: "25:70", // 잘못된 시간
        endsAt: "abc", // 잘못된 시간
        weekday: 1,
        enrollmentIds: ["enrollment-1"],
      },
    };

    // Act & Assert - 각 데이터 형식에 대해 안전하게 처리되는지 확인
    Object.entries(realWorldData).forEach(([key, session]) => {
      const { container } = render(
        <SessionBlock
          session={session}
          subjects={[]}
          students={[]}
          enrollments={[]}
          onClick={() => {}}
        />
      );

      // 컴포넌트가 크래시하지 않고 렌더링되는지 확인
      expect(container.firstChild).toBeInTheDocument();
      console.log(`${key} 데이터 형식이 안전하게 처리되었습니다.`);
    });
  });

  it("실제 Supabase에서 받은 복잡한 JSONB 데이터를 안전하게 처리해야 한다", () => {
    // Arrange - 실제 Supabase JSONB 데이터 구조
    const realSupabaseData = {
      user_id: "test-user",
      data: {
        students: [
          {
            id: "student-1",
            name: "김철수",
            gender: "male",
            createdAt: "2024-01-01T00:00:00Z",
            // 추가 필드가 있을 수 있음
            extraField: "unexpected",
          },
          {
            id: "student-2",
            name: "이영희",
            gender: "female",
            createdAt: "2024-01-01T00:00:00Z",
            // 일부 필드가 누락될 수 있음
          },
        ],
        subjects: [
          {
            id: "subject-1",
            name: "수학",
            color: "#FF0000",
            createdAt: "2024-01-01T00:00:00Z",
          },
          {
            id: "subject-2",
            name: "영어",
            color: "#00FF00",
            createdAt: "2024-01-01T00:00:00Z",
            // 예상치 못한 필드
            description: "English subject",
          },
        ],
        sessions: [
          {
            id: "session-1",
            subjectId: "subject-1",
            startsAt: "10:00",
            endsAt: "11:00",
            weekday: 1,
            enrollmentIds: ["enrollment-1"],
            createdAt: "2024-01-01T00:00:00Z",
            // 예상치 못한 필드
            metadata: { room: "A101" },
          },
        ],
        enrollments: [
          {
            id: "enrollment-1",
            studentId: "student-1",
            subjectId: "subject-1",
            createdAt: "2024-01-01T00:00:00Z",
          },
        ],
        version: "1.0",
        // 예상치 못한 최상위 필드
        settings: {
          theme: "dark",
          language: "ko",
        },
      },
    };

    // Act - 실제 데이터로 컴포넌트 렌더링
    const { container } = render(
      <TimeTableGrid
        sessions={new Map([["1", [realSupabaseData.data.sessions[0]]]])}
        subjects={realSupabaseData.data.subjects}
      />
    );

    // Assert - 컴포넌트가 안전하게 렌더링됨
    expect(container.firstChild).toBeInTheDocument();
    expect(screen.getByTestId("time-table-grid")).toBeInTheDocument();
  });

  it("실제 사용자 입력 데이터의 다양한 형식을 안전하게 처리해야 한다", () => {
    // Arrange - 사용자가 입력할 수 있는 다양한 형식
    const userInputVariations = [
      // 정상적인 입력
      { name: "김철수", expected: "김철수" },
      // 공백이 포함된 입력
      { name: " 김철수 ", expected: "김철수" },
      // 특수문자가 포함된 입력
      { name: "김철수@#$%", expected: "김철수@#$%" },
      // 이모지가 포함된 입력
      { name: "김철수😀", expected: "김철수😀" },
      // 매우 긴 입력
      { name: "김철수".repeat(100), expected: "김철수".repeat(100) },
      // 숫자가 포함된 입력
      { name: "김철수123", expected: "김철수123" },
      // HTML 태그가 포함된 입력
      {
        name: "<script>alert('test')</script>김철수",
        expected: "<script>alert('test')</script>김철수",
      },
    ];

    // Act & Assert - 각 입력 형식에 대해 안전하게 처리되는지 확인
    userInputVariations.forEach(({ name, expected }) => {
      const mockStudent = {
        id: "student-1",
        name: name,
        gender: "male",
      };

      const { container } = render(
        <StudentPanel
          panelState={{
            position: { x: 0, y: 0 },
            filteredStudents: [mockStudent],
            searchQuery: "",
          }}
          onSearchChange={() => {}}
          onStudentSelect={() => {}}
          onDragStart={() => {}}
          onDragEnd={() => {}}
        />
      );

      // 컴포넌트가 크래시하지 않고 렌더링되는지 확인
      expect(container.firstChild).toBeInTheDocument();
      console.log(`입력 형식 "${name}"이 안전하게 처리되었습니다.`);
    });
  });

  it("실제 브라우저 환경에서의 메모리 누수 방지 테스트", () => {
    // Arrange - 메모리 누수를 일으킬 수 있는 상황
    const createLargeDataSet = () => {
      return Array.from({ length: 1000 }, (_, i) => ({
        id: `student-${i}`,
        name: `학생${i}`,
        gender: i % 2 === 0 ? "male" : "female",
      }));
    };

    const largeDataSet = createLargeDataSet();

    // Act - 대량의 데이터로 컴포넌트 렌더링
    const { container, unmount } = render(
      <StudentPanel
        panelState={{
          position: { x: 0, y: 0 },
          filteredStudents: largeDataSet,
          searchQuery: "",
        }}
        onSearchChange={() => {}}
        onStudentSelect={() => {}}
        onDragStart={() => {}}
        onDragEnd={() => {}}
      />
    );

    // Assert - 컴포넌트가 렌더링됨
    expect(container.firstChild).toBeInTheDocument();

    // Act - 컴포넌트 언마운트
    unmount();

    // Assert - 메모리 누수가 발생하지 않았는지 확인
    // (실제로는 더 정교한 메모리 테스트가 필요하지만, 기본적인 언마운트 테스트)
    expect(container.firstChild).toBeNull();
  });
});
