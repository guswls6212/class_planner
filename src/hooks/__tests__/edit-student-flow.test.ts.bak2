import { act, renderHook } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";

// Mock Supabase client
vi.mock("../../utils/supabaseClient", () => ({
  supabase: {
    auth: {
      getUser: vi.fn(),
    },
    from: vi.fn(() => ({
      select: vi.fn(() => ({
        eq: vi.fn(() => ({
          single: vi.fn(),
        })),
      })),
      insert: vi.fn(() => ({
        select: vi.fn(),
      })),
      update: vi.fn(() => ({
        eq: vi.fn(() => ({
          select: vi.fn(),
        })),
      })),
      delete: vi.fn(() => ({
        eq: vi.fn(),
      })),
    })),
  },
}));

import { supabase } from "../../utils/supabaseClient";
import { useSessionManagement } from "../useSessionManagementImproved";

// Mock localStorage
const mockLocalStorage = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
};

Object.defineProperty(window, "localStorage", {
  value: mockLocalStorage,
});

describe("수업편집 학생 추가 플로우 테스트", () => {
  beforeEach(() => {
    vi.clearAllMocks();
    mockLocalStorage.getItem.mockReturnValue(null);
    vi.mocked(supabase.auth.getUser).mockResolvedValue({
      data: { user: null },
    });
  });

  it("수업편집 모달에서 학생 추가 시 임시 상태만 업데이트되어야 함", async () => {
    // Given: 테스트 데이터
    const students = [
      { id: "student-1", name: "기존학생" },
      { id: "student-2", name: "새로운학생" },
    ];

    const subjects = [{ id: "subject-1", name: "수학", color: "#ff0000" }];

    const existingSession = {
      id: "session-1",
      enrollmentIds: ["enrollment-1"],
      startsAt: "10:00",
      endsAt: "11:00",
      weekday: 1,
      room: "A101",
    };

    const existingEnrollment = {
      id: "enrollment-1",
      studentId: "student-1",
      subjectId: "subject-1",
    };

    // localStorage 설정
    mockLocalStorage.getItem.mockImplementation((key) => {
      if (key === "sessions") {
        return JSON.stringify([existingSession]);
      }
      if (key === "enrollments") {
        return JSON.stringify([existingEnrollment]);
      }
      if (key === "students") {
        return JSON.stringify(students);
      }
      if (key === "subjects") {
        return JSON.stringify(subjects);
      }
      return null;
    });

    const { result } = renderHook(() =>
      useSessionManagement(students, subjects)
    );

    // When: 학생을 세션에 추가 (임시 상태만 업데이트)
    await act(async () => {
      // 모달에서 학생 추가 시 임시 enrollment 생성
      const tempEnrollment = {
        id: "temp-enrollment-2",
        studentId: "student-2",
        subjectId: "subject-1",
      };

      // 모달 상태 업데이트 (실제 세션 데이터는 변경하지 않음)
      const updatedModalData = {
        ...existingSession,
        enrollmentIds: [...existingSession.enrollmentIds, tempEnrollment.id],
      };

      // 모달 상태만 업데이트하고 실제 세션 데이터는 변경하지 않음
      // 이는 실제 컴포넌트에서 setEditModalData로 처리됨
    });

    // Then: 실제 세션 데이터는 변경되지 않아야 함
    const sessions = result.current.sessions;
    const session = sessions.find((s) => s.id === existingSession.id);

    expect(session).toBeDefined();
    expect(session?.enrollmentIds).toEqual(existingSession.enrollmentIds);
    expect(session?.enrollmentIds).not.toContain("temp-enrollment-2");
  });

  it("수업편집 모달에서 저장 버튼 클릭 시 실제 세션 데이터가 업데이트되어야 함", async () => {
    // Given: 테스트 데이터
    const students = [
      { id: "student-1", name: "기존학생" },
      { id: "student-2", name: "새로운학생" },
    ];

    const subjects = [{ id: "subject-1", name: "수학", color: "#ff0000" }];

    const existingSession = {
      id: "session-1",
      enrollmentIds: ["enrollment-1"],
      startsAt: "10:00",
      endsAt: "11:00",
      weekday: 1,
      room: "A101",
    };

    const existingEnrollment = {
      id: "enrollment-1",
      studentId: "student-1",
      subjectId: "subject-1",
    };

    // localStorage 설정
    mockLocalStorage.getItem.mockImplementation((key) => {
      if (key === "sessions") {
        return JSON.stringify([existingSession]);
      }
      if (key === "enrollments") {
        return JSON.stringify([existingEnrollment]);
      }
      if (key === "students") {
        return JSON.stringify(students);
      }
      if (key === "subjects") {
        return JSON.stringify(subjects);
      }
      return null;
    });

    const { result } = renderHook(() =>
      useSessionManagement(students, subjects)
    );

    // 초기 데이터 로드 대기
    await act(async () => {
      // 훅이 초기 데이터를 로드할 때까지 대기
      await new Promise((resolve) => setTimeout(resolve, 100));
    });

    // When: 저장 버튼 클릭 (실제 세션 데이터 업데이트)
    await act(async () => {
      try {
        await result.current.updateSession(existingSession.id, {
          studentIds: ["student-1", "student-2"], // 새로 추가된 학생 포함
          subjectId: "subject-1",
          weekday: 1,
          startTime: "10:00",
          endTime: "11:00",
          room: "A101",
        });
      } catch (error) {
        console.error("updateSession 에러:", error);
      }
    });

    // Then: 실제 세션 데이터가 업데이트되어야 함
    const sessions = result.current.sessions;
    console.log("업데이트된 세션들:", sessions);
    const session = sessions.find((s) => s.id === existingSession.id);

    expect(session).toBeDefined();
    if (session) {
      expect(session.enrollmentIds).toHaveLength(2);
      expect(session.enrollmentIds).toContain("student-1-subject-1");
      expect(session.enrollmentIds).toContain("student-2-subject-1");
    }
  });
});
